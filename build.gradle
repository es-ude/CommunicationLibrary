apply plugin: "c"

model {

    components {

        CommunicationModule(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDirs "src/lib/"
                        include "**/*.c"
                    }
                    exportedHeaders {
                        srcDirs "src/lib/headers/"
                    }
                }
            }

            binaries.all {
                if (toolChain in Gcc) {
                    cCompiler.args "-Wall"
                }
            }


        }

        Unity(NativeLibrarySpec) {
          sources.c {
              source {
                  srcDirs "src/external_deps/Unity/src/"
                  include "unity.c"
              }
              exportedHeaders {
                  srcDirs "src/external_deps/Unity/src/"
              }
          }
       }

        TestMutex(NativeExecutableSpec) {
            sources.c {
                source {
                    srcDirs "src/test"
                    include "Mutex_Test.c"
                }
            lib library: "CommunicationModule", linkage: "static"
            lib library: "Unity", linkage: "static"
            }

        }


        tasks.withType(CppCompile) {
                finalizedBy showCompilerOutput
        }
    }

    tasks {
        showCompilerOutput(Task) {
            doLast {
                FileTree tree = fileTree('build').include('**/output.txt')
                // Iterate over the contents of a tree
                tree.each {File file ->
                    println file.text
                }
            }
        }

    }
}