#! /usr/bin/python

import fileinput
import re
import sys

testFunctions = []
includes = []


def isTestFunction(args):
    return re.match(r"\s*void (test_\w+).*", args)

def functionName(args):
    return re.sub(r"\s*void (test_\w+).*", r"\g<1>", args)

def isIncludeStatement(arg):
    return re.match(r"#include\s*\".*\.h\"", arg) or re.match(r'#include\s*<.*\.h>', arg)

def parseFile(inputfile, includes, testFunctions):
    linenumber = 0
    for line in inputfile:
        linenumber += 1
        if isTestFunction(line):
            testFunctions.append((functionName(line), linenumber))
        elif isIncludeStatement(line):
            includes.append(line)

outfile = open(sys.argv[2],'w')
parseFile(fileinput.input(sys.argv[1]), includes, testFunctions)

outfile.write(r'''
/* AUTOGENERATED FILE. DO NOT EDIT. */

/*=======Test Runner Used To Run Each Test Below=====*/
#define RUN_TEST(TestFunc, TestLineNum) \
{ \
  Unity.CurrentTestName = #TestFunc; \
  Unity.CurrentTestLineNumber = TestLineNum; \
  Unity.NumberOfTests++; \
  if (TEST_PROTECT()) \
  { \
      setUp(); \
      TestFunc(); \
  } \
  if (TEST_PROTECT()) \
  { \
    tearDown(); \
  } \
  UnityConcludeTest(); \
}

/*=======Automagically Detected Files To Include=====*/
#ifdef __WIN32__
#define UNITY_INCLUDE_SETUP_STUBS
#endif
#include "unity.h"
#ifndef UNITY_EXCLUDE_SETJMP_H
#include <setjmp.h>
#endif
''')

for include in includes:
    outfile.write(include)

outfile.write("""
extern void setUp(void);
extern void tearDown(void);
""")

for (functionName, linenumber) in testFunctions:
    outfile.write("extern void " + functionName + "(void);\n")

outfile.write("""
/*=======Suite Setup=====*/
static void suite_setup(void)
{
#if defined(UNITY_WEAK_ATTRIBUTE) || defined(UNITY_WEAK_PRAGMA)
  suiteSetUp();
#endif
}

/*=======Suite Teardown=====*/
static int suite_teardown(int num_failures)
{
#if defined(UNITY_WEAK_ATTRIBUTE) || defined(UNITY_WEAK_PRAGMA)
  return suiteTearDown(num_failures);
#else
  return num_failures;
#endif
}

/*=======Test Reset Option=====*/
void resetTest(void);
void resetTest(void)
{
  tearDown();
  setUp();
}


/*=======MAIN=====*/
int main(void)
{
  suite_setup();""")

outfile.write('  UnityBegin("' + sys.argv[1] + '");\n')

for (functionName, linenumber) in testFunctions:
    outfile.write("  RUN_TEST(" + functionName.replace("\n","") + ", " + str(linenumber) + ");\n")

outfile.write("  return suite_teardown(UnityEnd());\n}")
